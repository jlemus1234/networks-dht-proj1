											fprintf(stderr, "Passed to my successor\n");

                                                                                        if(greaterThanHash(self.hash, self.hashSucc) == 1){
												// greater loop break case
                                                                                                com joinreq;
                                                                                                joinreq.type = htonl(0);
                                                                                                joinreq.stat = htonl(1);
                                                                                                memcpy(joinreq.sourceIP, self.ipSucc, 16);
                                                                                                joinreq.sourcePort = htonl(self.portSucc);
                                                                                                memcpy(joinreq.IP2, self.ipAdd, 16);
                                                                                                joinreq.port2 = htonl(self.port);
                                                                                                joinreq.length = htonl(0);
                                                                                                pass(sizeof(joinreq), (char*) &joinreq, sourceIP, sourcePort);

												// to my successor
                                                                                                joinreq.type = htonl(0);
                                                                                                joinreq.stat = htonl(2);
                                                                                                memcpy(joinreq.IP2, sourceIP, 16);
                                                                                                joinreq.port2 = htonl(sourcePort);
                                                                                                joinreq.length = htonl(0);
                                                                                                pass(sizeof(joinreq), (char*) &joinreq, self.ipSucc, self.portSucc);

                                                                                                memcpy(self.ipSucc, sourceIP, 16);
                                                                                                self.portSucc = sourcePort;
                                                                                                memcpy(self.hashSucc, jhash,41);
                                                                                                printNode(&self);


                                                                                        }else{

                                                                                        pass(nbytes, buff, self.ipSucc, self.portSucc);
                                                                                        printNode(&self);

                                                                                        }
                                                                                }else{
                                                                                        fprintf(stderr, "This should never happen; ignore for now\n");
                                                                                        exit(1);

                                                                                }
                                                                        } else if(greaterThanHash(self.hash, jhash) == 2){
                                                                                fprintf(stderr, "This should never happen; ignore for now\n");
                                                                                exit(1);
                                                                        }

                                                                        }
                                                                        
                                                                        
                                                                                
                                                                }else if(stat == 1){ // add yourself in now
                                                                        fprintf(stderr, "\nstatus 1\n");
                                                                        self.portSucc = sourcePort;
									memcpy(self.ipSucc, sourceIP, 16);
                                                                        char *jhash = hashNode(sourceIP, sourcePort, 0);
									memcpy(self.hashSucc, jhash, 41);
                                                                        free(jhash);

									memcpy(self.ipPred , IP2, 16);
									self.portPred = port2;
									jhash = hashNode(IP2, port2, 0);
                                                                        memcpy(self.hashPred , jhash, 41);


									// Send request for all data
                                                                        outCom.type = htonl(0);
                                                                        outCom.stat = htonl(4);
                                                                        memcpy(outCom.sourceIP, self.ipAdd, 16);
                                                                        outCom.sourcePort = htonl(self.port);
                                                                        //outCom.length = htonl(data->len);
                                                                        pass(sizeof(outCom), (char*) &outCom, sourceIP, sourcePort);
									//
                                                                        printNode(&self);

                                                                }else if (stat == 2){
                                                                        fprintf(stderr, "\nstatus 2\n");
                                                                        fprintf(stderr, "large loop break;\n");

                                                                        char *jhash = hashNode(IP2, port2, 0);
									memcpy(self.ipPred , IP2, 16);
									self.portPred = port2;
                                                                        memcpy(self.hashPred , jhash, 41);
                                                                        printNode(&self);
									

                                                                }else if(stat == 3){
                                                                        fprintf(stderr, "\nstatus 3\n");
                                                                        fprintf(stderr, "Small loop break\n");
                                                                        self.portSucc = sourcePort;
									memcpy(self.ipSucc, sourceIP, 16);
                                                                        char *jhash = hashNode(sourceIP, sourcePort, 0);
									memcpy(self.hashSucc, jhash, 41);
                                                                        free(jhash);
                                                                        printNode(&self);
                                                                }else if(stat == 4){
                                                                        fprintf(stderr, "New node joined; send appropriate data");
                                                                        joinDataSplit(fdata, &self);
                                                                }
                                                        }else if(type == 1){ // Data Request
                                                                fprintf(stderr, "Data Request Recieved\n");
                                                                //reqHash;
                                                                //fdata;
                                                                char *rhash = hashNode(sourceIP, sourcePort, 0);
                                                                fprintf(stderr, "The requested data is:\n%s\n", reqHash);

                                                                if(memcmp(rhash, self.hash, 41) == 0){
                                                                        fprintf(stderr, "Source equal to current node, stop sending\n");
                                                                }else{

								dataPair* data = getData(fdata, reqHash);
								if(data == NULL){
									// Pass
									fprintf(stderr, "Didn't have data\n");
									pass(nbytes, buff, self.ipSucc, self.portSucc); // always passing to Succ
                                                                        printNode(&self);

                                                                }else{ // Found data, send it to requestor
									// outCom
                                                                        fprintf(stderr, "Found data\n");
                                                                        fprintf(stderr, "Sending %s:%i\n", sourceIP, sourcePort);
                                                                        fprintf(stderr, "Data:\n%s\n", data->data);
                                                                        outCom.type = htonl(2);
                                                                        outCom.stat = htonl(3);
                                                                        memcpy(outCom.sourceIP, self.ipAdd, 16);
                                                                        outCom.sourcePort = htonl(self.port);
                                                                        outCom.length = htonl(data->len);
									memcpy(outCom.reqHash, reqHash, 41);
								        memcpy(outCom.data, data->data, 512);
                                                                        pass(sizeof(outCom), (char*) &outCom, sourceIP, sourcePort);
                                                                }
                                                                }
                                                                
                                                        }else if(type == 2){
                                                                fprintf(stderr, "Data Put Recieved\n");
								//reqHash, data;
								dataPair new;
								new.key = &reqHash[0];
								new.data = &data[0];
                                                                fprintf(stderr, "Recieved data:\n%s\n", data);
								new.len = length;
                                                                insertPair(fdata, &new);
                                                                if(dip != 0){
                                                                        int finDL = checkDLQ(fdata, download);
                                                                        if(finDL == 1){
                                                                                writeDL(fdata, download);

                                                                                //dip = 0;
                                                                                //freeDLQ(download);
                                                                                //initDLQ(download);
                                                                        }
                                                                }

								// Pass the data along if necessary
								if(stat == 0){ // Passing to Predecessor if it is smaller
									if((greaterThanHash(reqHash, self.hashPred) == 1) || 
                                                                           (greaterThanHash(self.hashPred, self.hash) == 1)){
                                                                                fprintf(stderr, "reqHash larger than Pred, stop passing\n");
                                                                        }else{
                                                                                fprintf(stderr, "reqHash smaller than Pred, keep passing\n");
                                                                                pass(nbytes, buff, self.ipPred, self.portPred);
                                                                        }
                                                                }else if(stat == 1){ // Passing to successor
									if((greaterThanHash(reqHash, self.hashSucc) == 0) ||
                                                                           (greaterThanHash(self.hashSucc, self.hash) == 0)){
                                                                                fprintf(stderr, "stop passing put to successor\n");
                                                                        }else{
                                                                                fprintf(stderr, "Passing put to successor\n");
                                                                                pass(nbytes, buff, self.ipSucc, self.portSucc);
                                                                        }

                                                                }else{
                                                                        fprintf(stderr, "Not passing data down\n");
                                                                
                                                                }

                                                        }else{
                                                                fprintf(stderr, "Invalid type\n");
                                                        }
                                                        //printNode(&self);

                                                }
                                        }
                                }

                        }
                }
        }
                
        exit(1);

}


void* getInput()
{
	dip = 0;
	char str[100]; // filenames must be under 100 characters
	//char *str = NULL;
	char t;
        for(;;){
		fflush(stdin);
		fprintf(stdout, "Enter a command:\nupload: ['u' filename] | "
				"search: ['s' filename.fh] | force finger table update"
				"['t'] | print file table ['p'] \n");
		scanf(" %c %s", &t, (char *)&str);
		
		switch(t) {
                case 'u' :
                        fprintf(stdout, "Upload file:%s\n", str);
			inputFile(fdata, &str[0]);
                        break;
                case 'd' :
                        fprintf(stdout, "Download file:%s\n", str);
                        if(dip == 0){
                                fprintf(stdout, "Download begun: outputting to 'dlResult'\n");
                                beginDL(fdata, download, &str[0], &self);
                                dip = 1;

                                //int finDL = checkDLQ(fdata, download);
                                //if (finDL == 1){
                                //        writeDL(fdata, download);
                                //}
                                // if(finDL == 1){
                                //        dip = 0;
                                                                                //freeDLQ(download);
                                        //initDLQ(download);
                                //}

                        }else{
                                fprintf(stdout, "A download is already in progress\n");
                        }
			break;
		case 's' : 
			fprintf(stdout, "Search for file:%s\n", str);
			break;
		case 'l' :
                        fprintf(stdout, "Leave network\n");
                        break;
		case 't' :
			fprintf(stdout, "Force update\n");
			//pthread_mutex_lock(&modTableState);
                        break;
		case 'p' :
			fprintf(stdout, "Print data table\n");
                        printDataArr (fdata);
			break;
		case 'c' :
			fprintf(stdout, "Get element from data table\n");
			dataPair *temp = getData(fdata, str);
			if(temp == NULL){
                                fprintf(stderr, "Entry not found\n");
				fprintf(stderr, "used %zu, max %zu\n", fdata->used, fdata->max);
                        }else{
                                fprintf(stderr, "%s\n", temp->data);
                        }
                        break;
                default :
			fprintf(stderr, "Invalid command type\n");
			//fprintf(stderr, "%c, %s\n", t, str);
                }

        }
	fprintf(stderr, "Broke outside of loop\n");
	exit(1);

}

>>>>>>> 0ae081aa3d2b14c2ecb52f0cf49f01cb4e389702
